import os
import json
import pandas as pd
import PyPDF2
from dotenv import load_dotenv
from langchain_core.messages import HumanMessage
from langchain_community.chat_models.gigachat import GigaChat

load_dotenv('.env')

class FileDataProcessor:
    def __init__(self):
        self.llm = GigaChat(
            credentials=os.getenv('GIGACHAT_API_KEY'),
            model="GigaChat",
            temperature=0.7,
            verify_ssl_certs=False
        )
    
    def process_file(self, file_path, filter_criteria):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
        
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
        file_data = self._read_file(file_path)
        
        if not file_data:
            return {"error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {file_path}"}
        
        prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–π –∏—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º.
        
        –î–ê–ù–ù–´–ï –ò–ó –§–ê–ô–õ–ê:
        {file_data}
        
        –ö–†–ò–¢–ï–†–ò–ò –§–ò–õ–¨–¢–†–ê–¶–ò–ò:
        {filter_criteria}
        
        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
        1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        2. –ü—Ä–∏–º–µ–Ω–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        3. –í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –í –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
        4. –°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        5. –ù–µ –¥–æ–±–∞–≤–ª—è–π –ø–æ—è—Å–Ω–µ–Ω–∏—è –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç
        
        –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å—Ç—ã–º JSON.
        """
        
        try:
            response = self.llm.invoke([HumanMessage(content=prompt)])
            return self._extract_json(response.content)
            
        except Exception as e:
            return {"error": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"}
    
    def _read_file(self, file_path):
        """–ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞"""
        if not os.path.exists(file_path):
            return None
        
        file_ext = os.path.splitext(file_path)[1].lower()
        
        try:
            if file_ext == '.pdf':
                return self._read_pdf(file_path)
            elif file_ext in ['.xlsx', '.xls']:
                return self._read_excel(file_path)
            elif file_ext == '.csv':
                return self._read_csv(file_path)
            elif file_ext == '.json':
                return self._read_json(file_path)
            elif file_ext == '.txt':
                return self._read_txt(file_path)
            elif file_ext == '.sql':
                return self._read_sql(file_path)
            else:
                return f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_ext}"
                
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}"
    
    def _read_pdf(self, file_path):
        """–ß–∏—Ç–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ PDF —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'rb') as file:
                reader = PyPDF2.PdfReader(file)
                text = ""
                for page in reader.pages:
                    text += page.extract_text() + "\n"
                return text
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è PDF: {str(e)}"
    
    def _read_excel(self, file_path):
        """–ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–∞"""
        try:
            # –ß–∏—Ç–∞–µ–º –≤—Å–µ –ª–∏—Å—Ç—ã
            excel_file = pd.ExcelFile(file_path)
            result = {}
            
            for sheet_name in excel_file.sheet_names:
                df = pd.read_excel(file_path, sheet_name=sheet_name)
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º DataFrame –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                result[sheet_name] = {
                    "columns": df.columns.tolist(),
                    "data": df.fillna('').astype(str).to_dict('records')
                }
            
            return json.dumps(result, ensure_ascii=False, indent=2)
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel: {str(e)}"
    
    def _read_csv(self, file_path):
        """–ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV —Ñ–∞–π–ª–∞"""
        try:
            df = pd.read_csv(file_path)
            return {
                "columns": df.columns.tolist(),
                "data": df.fillna('').astype(str).to_dict('records')
            }
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV: {str(e)}"
    
    def _read_json(self, file_path):
        """–ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8') as file:
                data = json.load(file)
                return json.dumps(data, ensure_ascii=False, indent=2)
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: {str(e)}"
    
    def _read_txt(self, file_path):
        """–ß–∏—Ç–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ TXT —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8') as file:
                return file.read()
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è TXT: {str(e)}"
    
    def _read_sql(self, file_path):
        """–ß–∏—Ç–∞–µ—Ç SQL —Ñ–∞–π–ª"""
        try:
            with open(file_path, 'r', encoding='utf-8') as file:
                return file.read()
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è SQL: {str(e)}"
    
    def _extract_json(self, text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞"""
        try:
            start = text.find('{')
            end = text.rfind('}') + 1
            
            if start != -1 and end != 0:
                json_str = text[start:end]
                return json.loads(json_str)
            else:
                return json.loads(text)
        except:
            return {"raw_response": text}

def save_to_json(data, output_path):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª"""
    try:
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        return False

def get_user_files():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("\nüìÅ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):")
    print("(–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É)")
    
    file_paths = []
    while True:
        path = input().strip()
        if not path:
            break
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø—É—Ç–∏, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
        paths = [p.strip() for p in path.split(',') if p.strip()]
        file_paths.extend(paths)
    
    return file_paths

def main():
    print("üöÄ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤ —Å GigaChat")
    print("=" * 50)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        processor = FileDataProcessor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        file_paths = get_user_files()
        
        if not file_paths:
            print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        valid_files = []
        for file_path in file_paths:
            if os.path.exists(file_path):
                valid_files.append(file_path)
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω: {file_path}")
            else:
                print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        
        if not valid_files:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
        
        print("\nüéØ –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:")
        print("(–ü—Ä–∏–º–µ—Ä: '–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ –≥–¥–µ –≤–æ–∑—Ä–∞—Å—Ç –±–æ–ª—å—à–µ 18', '–≤—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞' –∏ —Ç.–¥.)")
        filter_criteria = input("–ö—Ä–∏—Ç–µ—Ä–∏–∏: ").strip()
        
        if not filter_criteria:
            print("‚ùå –ù–µ –≤–≤–µ–¥–µ–Ω—ã –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        all_results = {}
        
        for file_path in valid_files:
            print(f"\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: {os.path.basename(file_path)}")
            
            result = processor.process_file(file_path, filter_criteria)
            all_results[os.path.basename(file_path)] = result
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            output_file = f"filtered_{os.path.splitext(os.path.basename(file_path))[0]}.json"
            if save_to_json(result, output_file):
                print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if save_to_json(all_results, "all_filtered_results.json"):
            print(f"\nüìä –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: all_filtered_results.json")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
        print(f"\nüìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(valid_files)}")
        for file_path in valid_files:
            print(f"   üìÑ {os.path.basename(file_path)}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def show_supported_formats():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤"""
    print("\nüìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤:")
    formats = {
        ".pdf": "PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã",
        ".xlsx, .xls": "Excel —Ç–∞–±–ª–∏—Ü—ã", 
        ".csv": "CSV —Ñ–∞–π–ª—ã",
        ".json": "JSON –¥–∞–Ω–Ω—ã–µ",
        ".txt": "–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã",
        ".sql": "SQL —Ñ–∞–π–ª—ã"
    }
    
    for ext, desc in formats.items():
        print(f"   üîπ {ext} - {desc}")

if __name__ == "__main__":
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    show_supported_formats()
    print("\n" + "="*50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É
    main()