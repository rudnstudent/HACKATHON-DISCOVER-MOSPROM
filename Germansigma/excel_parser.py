#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Парсит Excel и возвращает JSON в заданной структуре.
Берётся первая строка таблицы (как пример).
Если нужные колонки или значения отсутствуют — ставится null.

| Блок                | Что делает                                          |
| ------------------- | --------------------------------------------------- |
| `to_null`           | Преобразует мусор в `None`                          |
| `pick`              | Безопасно достаёт ячейку из строки                  |
| `collect_year_data` | Собирает значения по всем годам автоматически       |
| `build_json`        | Формирует структурированный JSON из строки          |
"""
import sys
import json
import pandas as pd
from typing import Any, Dict, List, Optional


def to_null(v: Any) -> Any:
    if v is None:
        return None
    try:
        if pd.isna(v):
            return None
    except Exception:
        pass
    if isinstance(v, str):
        s = v.strip()
        if s == "" or s.lower() in {"nan","none","null","н/д","нет данных","—","-"}:
            return None
        return s
    return v


def pick(row: pd.Series, col: str) -> Any:
    if col not in row.index:
        return None
    return to_null(row[col])


def collect_year_data(row: pd.Series, keyword: str) -> Dict[str, Any]:
    """Собирает все колонки, содержащие ключевое слово и заканчивающиеся на год."""
    result = {}
    for col in row.index:
        if keyword in col:
            parts = col.strip().split()
            year = parts[-1]
            if year.isdigit() and len(year) > 1:
                result[year] = to_null(row[col])
    return result or None


def build_json(row: pd.Series) -> Dict[str, Any]:
    data: Dict[str, Any] = {
        "№": pick(row, "№"),
        "ИНН": pick(row, "ИНН"),
        "Наименование организации": pick(row, "Наименование организации"),
        "Полное наименование организации": pick(row, "Полное наименование организации"),
        "Статус СПАРК": pick(row, "Статус СПАРК"),
        "Статус внутренний": pick(row, "Статус внутренний"),
        "Статус ИТОГ": pick(row, "Статус ИТОГ"),
        "Дата добавления в реестр": pick(row, "Дата добавления в реестр"),
        "Юридический адрес": pick(row, "Юридический адрес"),
        "Адрес производства": pick(row, "Адрес производства"),
        "Адрес дополнительной площадки": pick(row, "Адрес дополнительной площадки"),
        "Основная отрасль": pick(row, "Основная отрасль"),
        "Подотрасль (Основная)": pick(row, "Подотрасль (Основная)"),
        "Дополнительная отрасль": pick(row, "Дополнительная отрасль"),
        "Подотрасль (Дополнительная)": pick(row, "Подотрасль (Дополнительная)"),
        "Основной ОКВЭД (СПАРК)": pick(row, "Основной ОКВЭД (СПАРК)"),
        "Вид деятельности по основному ОКВЭД (СПАРК)": pick(row, "Вид деятельности по основному ОКВЭД (СПАРК)"),
        "Производственный ОКВЭД": pick(row, "Производственный ОКВЭД"),
        "Вид деятельности по производственному ОКВЭД": pick(row, "Вид деятельности по производственному ОКВЭД"),
        "Общие сведения об организации": pick(row, "Общие сведения об организации"),
        "Размер предприятия (итог)": pick(row, "Размер предприятия (итог)"),
        "Размер предприятия (по численности)": pick(row, "Размер предприятия (по численности)"),
        "Размер предприятия (по выручке)": pick(row, "Размер предприятия (по выручке)"),
        "Дата регистрации": pick(row, "Дата регистрации"),
        "Руководитель": pick(row, "Руководитель"),
        "Контактные данные руководства": pick(row, "Контактные данные руководства"),
        "Почта руководства": pick(row, "Почта руководства"),
        "Контакт сотрудника организации": pick(row, "Контакт сотрудника организации"),
        "Номер телефона": pick(row, "Номер телефона"),
        "Сайт": pick(row, "Сайт"),
        "Электронная почта": pick(row, "Электронная почта"),
        "Системообразующее предприятие": pick(row, "Системообразующее предприятие"),
        "Статус МСП": pick(row, "Статус МСП"),
        "Площадка итог": pick(row, "Площадка итог"),
    }

    # Финансово-экономические показатели
    
    data["Финансово-экономические показатели"] = {
        "Выручка предприятия, тыс. руб.": collect_year_data(row, "Выручка предприятия, тыс. руб."),
        "Чистая прибыль (убыток), тыс. руб.": collect_year_data(row, "Чистая прибыль (убыток)"),
        "Среднесписочная численность персонала (всего по компании), чел": collect_year_data(row, "Среднесписочная численность персонала (всего по компании)"),
        "Фонд оплаты труда всех сотрудников организации, тыс. руб.": collect_year_data(row, "Фонд оплаты труда всех сотрудников организации"),
        "НДФЛ, тыс. руб.": collect_year_data(row, "НДФЛ, тыс.руб."),
        "Налог на прибыль, тыс. руб.": collect_year_data(row, "Налог на прибыль"),
    }

    # Имущественно-земельный комплекс
    
    data["Имущественно-земельный комплекс"] = {
        "Кадастровый номер ЗУ": pick(row, "Кадастровый номер ЗУ"),
        "Площадь ЗУ (га)": pick(row, "Площадь ЗУ"),
        "Вид разрешенного использования ЗУ": pick(row, "Вид разрешенного использования ЗУ"),
        "Вид собственности ЗУ": pick(row, "Вид собственности ЗУ"),
        "Кадастровый номер ОКСа": pick(row, "Кадастровый номер ОКСа"),
        "Площадь ОКСов (кв.м)": pick(row, "Площадь ОКСов"),
        "Вид собственности ОКСов": pick(row, "Вид собственности ОКСов"),
    }

    # Производимая продукция
    
    codes_raw = pick(row, "Перечень производимой продукции по кодам ОКПД 2")
    codes = None
    if isinstance(codes_raw, str):
        codes = [c.strip() for c in codes_raw.replace(",", ";").split(";") if c.strip()]

    data["Производимая продукция"] = {
        "Название": pick(row, "Название (виды производимой продукции)"),
        "Коды ОКПД 2": codes,
        "Наличие госзаказа": pick(row, "Наличие госзаказа"),
        "Наличие поставок продукции на экспорт": pick(row, "Наличие поставок продукции на экспорт"),
        "Объем экспорта (млн руб.)": pick(row, "Объем экспорта (млн.руб.) за предыдущий календарный год"),
        "Перечень государств": (
            [s.strip() for s in pick(row, "Перечень государств куда экспортируется продукция").split(";")]
            if isinstance(pick(row, "Перечень государств куда экспортируется продукция"), str) else None
        ),
    }

    # Координаты
    
    data["Координаты"] = {
        "Широта": pick(row, "Координаты (широта)"),
        "Долгота": pick(row, "Координаты (долгота)"),
        "Округ": pick(row, "Округ"),
        "Район": pick(row, "Район"),
    }

    return data


def parse_excel(excel_path):

    df = pd.read_excel(excel_path, dtype=str)
    df.columns = [str(c).strip().replace("\ufeff", "") for c in df.columns]
    if df.empty:
        print("Файл пуст", file=sys.stderr)
        sys.exit(2)

    row = df.iloc[0]
    data = build_json(row)
    return json.dumps(data, ensure_ascii=False, indent=2)


print(parse_excel("test.xlsx"))
